# 문제: 상근이가 1학년 때, 덧셈, 뺄셈을 매우 좋아했다. 상근이는 숫자가 줄 지어있는 것을 보기만 하면, 마지막 두 숫자 사이에 '='을 넣고, 나머지 숫자 사이에는 '+' 또는 '-'를 넣어 등식을 만들며 놀고 있다. 예를 들어, "8 3 2 4 8 7 2 4 0 8 8"에서 등식 "8+3-2-4+8-7-2-4-0+8=8"을 만들 수 있다.
# 상근이는 올바른 등식을 만들려고 한다. 상근이는 아직 학교에서 음수를 배우지 않았고, 20을 넘는 수는 모른다. 따라서, 왼쪽부터 계산할 때, 중간에 나오는 수가 모두 0 이상 20 이하이어야 한다. 예를 들어, "8+3+2-4-8-7+2+4+0+8=8"은 올바른 등식이지만, 8+3+2-4-8-7이 음수이기 때문에, 상근이가 만들 수 없는 등식이다.
# 숫자가 주어졌을 때, 상근이가 만들 수 있는 올바른 등식의 수를 구하는 프로그램을 작성하시오.

# 입력: 첫째 줄에 숫자의 개수 N이 주어진다. (3 ≤ N ≤ 100) 둘째 줄에는 0 이상 9 이하의 정수 N개가 공백으로 구분해 주어진다.

# 출력: 첫째 줄에 상근이가 만들 수 있는 올바른 등식의 개수를 출력한다. 이 값은 263-1 이하이다.

import sys

n = int(sys.stdin.readline())
num = list(map(int, sys.stdin.readline().split()))
# 결과값을 저장해주는 list
dp = [0]*21
# 결과값을 구하기 위해 임의로 사용되는 list
temp = [0]*21

# dp의 index는 현재까지 idx값을 만들수 있는 식의 수를 의미한다
# 따라서 n-2까지 계산을 한 값에서 dp[n-1]값을 구하면 그 값이 결과값이 된다.
# temp는 숫자를 하나씩 거칠때 마다 그 숫자를 거치면 결과값이 idx인 경우를 저장해준다.
# 2중 for문에서 지금 숫자의 전 숫자까지의 결과값이 0~20이 만들어지는 식의 수에서 현재 숫자를 판단해 현재 수까지 식의 경우를 저장해준뒤 dp에 다시 copy해준다.

dp[num[0]] = 1

for i in num[1:n-1]:
    temp = [0]*21

    for idx in range(0, 21):
        if(idx-i >= 0):
            temp[idx - i] += dp[idx]

        if(idx+i <= 20):
            temp[idx + i] += dp[idx]

    dp = temp.copy()

print(dp[num[n-1]])
