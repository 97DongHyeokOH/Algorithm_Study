# 문제: 진영이는 캠프 조교를 온 후 효율적으로 시간 관리를 해야 한다는 것을 깨달았다. 진영이는 하루에 해야 할 일이 총 N개가 있고 이 일들을 편하게 1번부터 N번까지 차례대로 번호를 붙였다.
# 진영이는 시간을 효율적으로 관리하기 위해, 할 일들에 대해 끝내야할 시간과 걸리는 시간을 적은 명단을 만들었다. 즉, 이 명단은 i번째 일은 일을 처리하는데 정확히 Ti 시간이 걸리고 Si 시 내에 이 일을 처리하여야 한다는 것을 담고 있다. 진영이는 0시부터 활동을 시작할 수 있고, 두 개 이상의 일을 같은 시간에 처리할 수 없다.
# 진영이가 바라는 점은 최대한 늦잠을 자는 것이다. 문제는 이러한 진영이를 도와 일들은 모두 마감시간 내에 처리할 수 있는 범위 내에서 최대한 늦게 일을 시작할 수 있는 시간이 몇 시인지 알아내는 것이다.

# 입력: 첫째 줄에 일의 수 N이 입력되고 다음 N(1≤N≤1,000)개의 줄에 대해 i+1번째 줄에는 i번째 일에 대한 Ti(1≤Ti≤1,000)와 Si(1≤Si≤1,000,000)가 입력된다.

# 출력: 진영이가 일을 모두 끝마칠 수 있는 가장 늦은 시간을 출력한다. 만약 0시부터 시작하여도 일을 끝마칠 수 없다면 -1을 출력한다.

# 풀이
# 딱히 어려운 문제이지 않다.
# 할 일들을 끝내할 시간을 기준으로 내림차순으로 정렬을 해준뒤, result에 가장 늦게 끝내도 되는 시간을 집어넣고
# 해당 일에 대한 시간을 빼준뒤, result 값과 다음으로 늦게 끝내도 되는 시간을 비교하여 작은 값을 result에 넣어준뒤 시간을 빼주는것을 반복한다.

import sys

n = int(sys.stdin.readline())
work = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]

# 입력받은 work를 일을 끝내야 되는 시간에 대해 내림차순으로 정렬해준다.
temp = sorted(work, key=lambda x: -x[1])

result = temp[0][1]

for i in temp:
    result = min(result, i[1])
    result -= i[0]

if(result < 0):
    print(-1)
else:
    print(result)
